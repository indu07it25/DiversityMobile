<#@ template debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ include file="ReactiveModel.ttinclude" #>
<#@ import namespace="System" #>
<#
   
#>

using System;
using System.Linq;
using ReactiveUI;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using DiversityPhone.Interface;

namespace DiversityPhone.Model
{	
	[Table]
	public class EventProperty : ReactiveObject, IModifyable, IWriteableEntity
	{
#pragma warning disable 0169
		[Column(IsVersion = true)]
		private Binary version;
#pragma warning restore 0169

<# Row("int?", "EventID", RowKind.CompositeKey); #>   
<# Row("int", "PropertyID", RowKind.CompositeKey); #> 

<# Row("string", "DisplayText"); #>
<# Row("string", "PropertyUri"); #>
  
<# Row("ModificationState", "ModificationState"); #>
  
		public EventProperty()
        {            
            this.ModificationState = ModificationState.New;
        }

		public int? EntityID 
		{
			get { return EventID; }
			set { EventID = value; }
		}
    }
}
 
