<#@ template debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ include file="ReactiveModel.ttinclude" #>
<#@ import namespace="System" #>


using System;
using System.Linq;
using ReactiveUI;
using System.Data.Linq.Mapping;
using System.Data.Linq;
using DiversityPhone.Interface;

namespace DiversityPhone.Model
{	
	[Table]
	public class Specimen : ReactiveObject, IMappedEntity, IMultimediaOwner
	{
#pragma warning disable 0169
		[Column(IsVersion = true)]
		private Binary version;
#pragma warning restore 0169

<# Row("int?", "SpecimenID", RowKind.Key); #>
<# Row("int?", "CollectionSpecimenID", RowKind.Nullable); #>   
<# Row("int", "EventID"); #>

<# Row("string", "AccessionNumber"); #>
 
<# Row("ModificationState", "ModificationState"); #>

        public Specimen()
        {
            this.AccessionNumber = null;            
            this.ModificationState = ModificationState.New;            
        }


        public DBObjectType EntityType
        {
            get { return DBObjectType.Specimen; }
        }

        public int? EntityID
        {
            get { return SpecimenID; }
			set { SpecimenID = value; }
        }

		public int? MappedID
        {
            get { return CollectionSpecimenID; }
			set { CollectionSpecimenID = value; }
        }
    }


    public static class SpecimenMixin
    {
        public static bool IsObservation(this Specimen spec)
        {
            return spec.AccessionNumber == null
                && spec.SpecimenID.HasValue;
        }

        public static Specimen MakeObservation(this Specimen spec)
        {
            spec.AccessionNumber = null;
            return spec;
        }
    }
} 